I learned about the benefits of creating a compiler. We will use a syntax analyzer for our first part, comparing with XML files (and probably TextComparer.bat). Generating a compiler will help you understand what you need to do to create one. Also in this way you can extend your code to handle things like decimals.
I learned about lexical analysis. When we tokenize, we mean turning each group of characters into a stream of meaningful XML lines. This XML file is something like the thing to the (log stopped)
Our brains follow the same grammar rules that we learned throughout our life, that are sort of 'wired' to our brain. Our brain still tries to match a bit of the sentence they are given if it doesn't follow the grammar completely, while if that was given to a compiler, it would immediately raise their hands and say that you have to fix the sentence.
English is an ambiguous language and has many parse trees for a certain sentence, while programming languages are much less ambiguous. Our output XML file is going to be styled like an HTML file. For example, count + 1:
<expression>
    <term>
        <identifier> count </identifier>
    </term>
    <symbol> + </symbol>
    <term>
        <integerConstant> 1 </integerConstant>
    </term>
</expression
I learned about how we're going to structure our Parser. It's going to have functions that all begin with 'compile'. There's also going to be an 'eat' function which checks the current token, writes it down in the XML file, and then advances to the next token. For compileWhileStatement(), we will have 'eat('while') eat('(') compileExpression() eat(')')  eat('{') compileStatements() eat('}')'.
LL parsing is where we don't have to backtrack and reconsider one of the methods we wanted to invoke to compile. LL(k) parsing is LL parsing where you have to look k tokens ahead to determine what method you have to invoke. LL(1) is the simplest and luckily our Jack language uses that except for array indexing and methods.
I learned about the jack grammar. This tme I took pictures and I can't really tell you. But if you see a 'variable name', you need to look ahead and see if it's a plain function call, a variable name that needs to call a function, an array access, or just that variable.
When you encounter a terminal or non-trivial non-terminal Jack gammar subset, you should write <{name of the
rule}>{conten ts}</{name of the rule}>, just like HTML tags.
